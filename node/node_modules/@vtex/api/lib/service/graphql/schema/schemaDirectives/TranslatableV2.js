"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bluebird_1 = require("bluebird");
const graphql_1 = require("graphql");
const graphql_tools_1 = require("graphql-tools");
const messagesLoaderV2_1 = require("../messagesLoaderV2");
class TranslatableV2 extends graphql_tools_1.SchemaDirectiveVisitor {
    visitFieldDefinition(field) {
        const { resolve = graphql_1.defaultFieldResolver } = field;
        const { behavior = 'FULL', context = 'default' } = this.args;
        field.resolve = async (root, args, ctx, info) => {
            if (!ctx.loaders || !ctx.loaders.messagesV2) {
                ctx.loaders = Object.assign({}, ctx.loaders, { messagesV2: messagesLoaderV2_1.messagesLoaderV2(ctx.clients) });
            }
            const response = await resolve(root, args, ctx, info);
            const handler = handleSingleString(ctx, behavior, context);
            return Array.isArray(response) ? await bluebird_1.map(response, handler) : await handler(response);
        };
    }
}
exports.TranslatableV2 = TranslatableV2;
const handleSingleString = (ctx, behavior, context) => async (response) => {
    // Messages only knows how to process non empty strings.
    if ((typeof response !== 'string' && typeof response !== 'object') || Array.isArray(response) || response == null) {
        return response;
    }
    const resObj = typeof response === 'string'
        ? {
            content: response,
            description: '',
            from: undefined,
        }
        : response;
    const { content, from } = resObj;
    const { clients: { segment }, vtex: { locale } } = ctx;
    if (content == null) {
        throw new Error(`@translatable directive needs a content to translate, but received ${JSON.stringify(response)}`);
    }
    const to = locale != null
        ? locale
        : (await segment.getSegment()).cultureInfo;
    // If the message is already in the target locale, return the content.
    if (!to || from === to) {
        return content;
    }
    return ctx.loaders.messagesV2.load(Object.assign({ behavior,
        context,
        from,
        to }, resObj));
};
