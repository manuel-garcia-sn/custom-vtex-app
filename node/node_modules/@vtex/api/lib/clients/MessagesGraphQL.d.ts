import { AppGraphQLClient, InstanceOptions } from '../HttpClient';
import { IOContext } from '../service/typings';
import { IOMessage } from '../utils/message';
declare type IOMessageInput = Pick<IOMessage, 'id' | 'content' | 'description' | 'behavior'>;
export declare type IOMessageInputV2 = Pick<IOMessageV2, 'content' | 'context' | 'behavior'>;
declare type Behavior = 'FULL' | 'USER_ONLY' | 'USER_AND_APP';
export interface IOMessageV2 extends IOMessageInputV2 {
    content: string;
    context?: string;
    behavior?: Behavior;
    from?: string;
    to?: string;
}
interface MessagesInput {
    provider: string;
    messages: IOMessageInput[];
}
export interface IOMessageSaveInput extends IOMessageInput {
    content: string;
}
export interface Translate {
    messages: MessagesInput[];
    from?: string;
    to: string;
}
export interface TranslateInputV2 {
    messages: IOMessageInputV2[];
    from?: string;
    to: string;
}
export interface SaveArgs {
    to: string;
    messagesByProvider: Array<{
        messages: IOMessageSaveInput[];
        provider: string;
    }>;
}
export declare class MessagesGraphQL extends AppGraphQLClient {
    constructor(vtex: IOContext, options?: InstanceOptions);
    translate: (args: Translate) => Promise<string[]>;
    translateV2: (args: TranslateInputV2) => Promise<string[]>;
    save: (args: SaveArgs) => Promise<boolean>;
}
export {};
